PRAGMA foreign_keys=OFF;
PRAGMA user_version = 6;
BEGIN TRANSACTION;
CREATE TABLE android_metadata (locale TEXT);
INSERT INTO "android_metadata" VALUES('en_NL');
CREATE TABLE memo (_id INTEGER PRIMARY KEY AUTOINCREMENT, header TEXT, note TEXT NOT NULL, emotion text DEFAULT 'ordinary', private INTEGER DEFAULT 1, created INTEGER NOT NULL, modified INTEGER NULL, tags TEXT, location TEXT, address TEXT, locality TEXT, data1, data2, data3, data4, data5, remote_id TEXT NULL, remote_etag TEXT NULL, remote_updated INTEGER NULL, weather TEXT NULL);
CREATE TABLE tag (_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL UNIQUE, data1, data2);
CREATE TABLE attachement (_id INTEGER PRIMARY KEY AUTOINCREMENT, memo_id INTEGER NOT NULL REFERENCES memo(_id) ON DELETE CASCADE, uri TEXT NOT NULL, mime TEXT NOT NULL, data1, data2, data3, data4, data5, data6 NULL, data7 NULL, data8 NULL);
CREATE TABLE extra (_id INTEGER PRIMARY KEY AUTOINCREMENT, operation INTEGER, sync_target NULL, sync_etag NULL, sync_update NULL, title, data4, data5, data6, data7, data8);
CREATE TABLE properties (_id INTEGER PRIMARY KEY AUTOINCREMENT, pname TEXT NOT NULL UNIQUE, pvalue NULL, ptype TEXT NULL);
INSERT INTO "properties" VALUES(1,'memoires.db.secured','false','java.lang.Boolean');
CREATE TABLE flow (_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NULL, created INTEGER NOT NULL, data1, data2, data3);
DELETE FROM sqlite_sequence;
INSERT INTO "sqlite_sequence" VALUES('memo',1);
INSERT INTO "sqlite_sequence" VALUES('properties',1);
INSERT INTO "sqlite_sequence" VALUES('attachement',1);
CREATE TRIGGER fki_attachement_memo_id BEFORE INSERT ON attachement FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'insert on table "attachement" violates foreign key constraint "fki_attachement_memo_id"') WHERE  (SELECT _id FROM memo WHERE _id = NEW.memo_id) IS NULL; END;
CREATE TRIGGER fku_attachement_memo_id BEFORE UPDATE ON attachement FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'update on table "attachement" violates foreign key constraint "fku_attachement_memo_id"') WHERE  (SELECT _id FROM memo WHERE _id = NEW.memo_id) IS NULL; END;
CREATE TRIGGER td_memo AFTER DELETE ON memo FOR EACH ROW BEGIN UPDATE memo SET data2=OLD.data2 WHERE data2=OLD._id; DELETE FROM flow WHERE created=OLD.data1 AND (SELECT count(data1) FROM memo WHERE data1=OLD.data1)<=1; UPDATE memo SET data1=0, data2=0 WHERE data1=OLD.data1 AND (SELECT count(data1) FROM memo WHERE data1=OLD.data1)<=1; END;
CREATE TRIGGER tu_memo AFTER UPDATE ON memo FOR EACH ROW BEGIN UPDATE memo SET data2=OLD.data2 WHERE data2=OLD._id AND (OLD.data2 NOT NULL AND OLD.data2 != 0) AND (NEW.data2 IS NULL OR NEW.data2 = 0) AND (SELECT count(_id) FROM memo WHERE _id=OLD.data2) > 0; DELETE FROM flow WHERE created=OLD.data1 AND (SELECT count(data1) FROM memo WHERE data1=OLD.data1)<=1; UPDATE memo SET data1=0, data2=0 WHERE data1=OLD.data1 AND (SELECT count(data1) FROM memo WHERE data1=OLD.data1)<=1; END;
COMMIT;
